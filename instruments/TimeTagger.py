# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""The TimeTagger module measures timing events very accurately."""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TimeTagger')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TimeTagger')
    _TimeTagger = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TimeTagger', [dirname(__file__)])
        except ImportError:
            import _TimeTagger
            return _TimeTagger
        try:
            _mod = imp.load_module('_TimeTagger', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TimeTagger = swig_import_helper()
    del swig_import_helper
else:
    import _TimeTagger
del _swig_python_version_info

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TimeTagger.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(self, n=1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _TimeTagger.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(self, n=1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _TimeTagger.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(self, x) -> ptrdiff_t"""
        return _TimeTagger.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator_copy(self)


    def next(self):
        """next(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator___next__(self)


    def previous(self):
        """previous(self) -> PyObject *"""
        return _TimeTagger.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(self, x) -> bool"""
        return _TimeTagger.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(self, n) -> SwigPyIterator"""
        return _TimeTagger.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _TimeTagger.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TimeTagger.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector:
    """Proxy of C++ std::vector<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.IntVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.IntVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> IntVector"""
        return _TimeTagger.IntVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.IntVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.IntVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.IntVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> IntVector
        __getitem__(self, i) -> std::vector< int >::value_type const &
        """
        return _TimeTagger.IntVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.IntVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::vector< int >::value_type"""
        return _TimeTagger.IntVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.IntVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.IntVector_empty(self)


    def size(self):
        """size(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.IntVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< int >::iterator"""
        return _TimeTagger.IntVector_begin(self)


    def end(self):
        """end(self) -> std::vector< int >::iterator"""
        return _TimeTagger.IntVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< int >::reverse_iterator"""
        return _TimeTagger.IntVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< int >::reverse_iterator"""
        return _TimeTagger.IntVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.IntVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< int >::allocator_type"""
        return _TimeTagger.IntVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.IntVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< int >::iterator
        erase(self, first, last) -> std::vector< int >::iterator
        """
        return _TimeTagger.IntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> IntVector
        __init__(self, arg2) -> IntVector
        __init__(self, size) -> IntVector
        __init__(self, size, value) -> IntVector
        """
        this = _TimeTagger.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.IntVector_push_back(self, x)


    def front(self):
        """front(self) -> std::vector< int >::value_type const &"""
        return _TimeTagger.IntVector_front(self)


    def back(self):
        """back(self) -> std::vector< int >::value_type const &"""
        return _TimeTagger.IntVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.IntVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.IntVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< int >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.IntVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.IntVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< int >::size_type"""
        return _TimeTagger.IntVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _TimeTagger.IntVector_swigregister
IntVector_swigregister(IntVector)

class UIntVector:
    """Proxy of C++ std::vector<(unsigned int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.UIntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.UIntVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.UIntVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> UIntVector"""
        return _TimeTagger.UIntVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.UIntVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.UIntVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.UIntVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UIntVector
        __getitem__(self, i) -> std::vector< unsigned int >::value_type const &
        """
        return _TimeTagger.UIntVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.UIntVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::vector< unsigned int >::value_type"""
        return _TimeTagger.UIntVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.UIntVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.UIntVector_empty(self)


    def size(self):
        """size(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.UIntVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< unsigned int >::iterator"""
        return _TimeTagger.UIntVector_begin(self)


    def end(self):
        """end(self) -> std::vector< unsigned int >::iterator"""
        return _TimeTagger.UIntVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< unsigned int >::reverse_iterator"""
        return _TimeTagger.UIntVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< unsigned int >::reverse_iterator"""
        return _TimeTagger.UIntVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.UIntVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< unsigned int >::allocator_type"""
        return _TimeTagger.UIntVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.UIntVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned int >::iterator
        erase(self, first, last) -> std::vector< unsigned int >::iterator
        """
        return _TimeTagger.UIntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> UIntVector
        __init__(self, arg2) -> UIntVector
        __init__(self, size) -> UIntVector
        __init__(self, size, value) -> UIntVector
        """
        this = _TimeTagger.new_UIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.UIntVector_push_back(self, x)


    def front(self):
        """front(self) -> std::vector< unsigned int >::value_type const &"""
        return _TimeTagger.UIntVector_front(self)


    def back(self):
        """back(self) -> std::vector< unsigned int >::value_type const &"""
        return _TimeTagger.UIntVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.UIntVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.UIntVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned int >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.UIntVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.UIntVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< unsigned int >::size_type"""
        return _TimeTagger.UIntVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_UIntVector
    __del__ = lambda self: None
UIntVector_swigregister = _TimeTagger.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class LongVector:
    """Proxy of C++ std::vector<(long long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.LongVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.LongVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.LongVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> LongVector"""
        return _TimeTagger.LongVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.LongVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.LongVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.LongVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> LongVector
        __getitem__(self, i) -> std::vector< long long >::value_type const &
        """
        return _TimeTagger.LongVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.LongVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::vector< long long >::value_type"""
        return _TimeTagger.LongVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.LongVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.LongVector_empty(self)


    def size(self):
        """size(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.LongVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< long long >::iterator"""
        return _TimeTagger.LongVector_begin(self)


    def end(self):
        """end(self) -> std::vector< long long >::iterator"""
        return _TimeTagger.LongVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< long long >::reverse_iterator"""
        return _TimeTagger.LongVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< long long >::reverse_iterator"""
        return _TimeTagger.LongVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.LongVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< long long >::allocator_type"""
        return _TimeTagger.LongVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.LongVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< long long >::iterator
        erase(self, first, last) -> std::vector< long long >::iterator
        """
        return _TimeTagger.LongVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> LongVector
        __init__(self, arg2) -> LongVector
        __init__(self, size) -> LongVector
        __init__(self, size, value) -> LongVector
        """
        this = _TimeTagger.new_LongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.LongVector_push_back(self, x)


    def front(self):
        """front(self) -> std::vector< long long >::value_type const &"""
        return _TimeTagger.LongVector_front(self)


    def back(self):
        """back(self) -> std::vector< long long >::value_type const &"""
        return _TimeTagger.LongVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.LongVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.LongVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< long long >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.LongVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.LongVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< long long >::size_type"""
        return _TimeTagger.LongVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _TimeTagger.LongVector_swigregister
LongVector_swigregister(LongVector)

class ULongVector:
    """Proxy of C++ std::vector<(unsigned long long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.ULongVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.ULongVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.ULongVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> ULongVector"""
        return _TimeTagger.ULongVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.ULongVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.ULongVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.ULongVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> ULongVector
        __getitem__(self, i) -> std::vector< unsigned long long >::value_type const &
        """
        return _TimeTagger.ULongVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.ULongVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::vector< unsigned long long >::value_type"""
        return _TimeTagger.ULongVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.ULongVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.ULongVector_empty(self)


    def size(self):
        """size(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.ULongVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< unsigned long long >::iterator"""
        return _TimeTagger.ULongVector_begin(self)


    def end(self):
        """end(self) -> std::vector< unsigned long long >::iterator"""
        return _TimeTagger.ULongVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _TimeTagger.ULongVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< unsigned long long >::reverse_iterator"""
        return _TimeTagger.ULongVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.ULongVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< unsigned long long >::allocator_type"""
        return _TimeTagger.ULongVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.ULongVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< unsigned long long >::iterator
        erase(self, first, last) -> std::vector< unsigned long long >::iterator
        """
        return _TimeTagger.ULongVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> ULongVector
        __init__(self, arg2) -> ULongVector
        __init__(self, size) -> ULongVector
        __init__(self, size, value) -> ULongVector
        """
        this = _TimeTagger.new_ULongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.ULongVector_push_back(self, x)


    def front(self):
        """front(self) -> std::vector< unsigned long long >::value_type const &"""
        return _TimeTagger.ULongVector_front(self)


    def back(self):
        """back(self) -> std::vector< unsigned long long >::value_type const &"""
        return _TimeTagger.ULongVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.ULongVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.ULongVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< unsigned long long >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.ULongVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.ULongVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< unsigned long long >::size_type"""
        return _TimeTagger.ULongVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_ULongVector
    __del__ = lambda self: None
ULongVector_swigregister = _TimeTagger.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class StringVector:
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.StringVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.StringVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< std::string >::size_type"""
        return _TimeTagger.StringVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> StringVector"""
        return _TimeTagger.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.StringVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.StringVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> StringVector
        __getitem__(self, i) -> std::vector< std::string >::value_type const &
        """
        return _TimeTagger.StringVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.StringVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::vector< std::string >::value_type"""
        return _TimeTagger.StringVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.StringVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.StringVector_empty(self)


    def size(self):
        """size(self) -> std::vector< std::string >::size_type"""
        return _TimeTagger.StringVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.StringVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< std::string >::iterator"""
        return _TimeTagger.StringVector_begin(self)


    def end(self):
        """end(self) -> std::vector< std::string >::iterator"""
        return _TimeTagger.StringVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< std::string >::reverse_iterator"""
        return _TimeTagger.StringVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< std::string >::reverse_iterator"""
        return _TimeTagger.StringVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.StringVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< std::string >::allocator_type"""
        return _TimeTagger.StringVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.StringVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::string >::iterator
        erase(self, first, last) -> std::vector< std::string >::iterator
        """
        return _TimeTagger.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> StringVector
        __init__(self, arg2) -> StringVector
        __init__(self, size) -> StringVector
        __init__(self, size, value) -> StringVector
        """
        this = _TimeTagger.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.StringVector_push_back(self, x)


    def front(self):
        """front(self) -> std::vector< std::string >::value_type const &"""
        return _TimeTagger.StringVector_front(self)


    def back(self):
        """back(self) -> std::vector< std::string >::value_type const &"""
        return _TimeTagger.StringVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.StringVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.StringVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::string >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.StringVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.StringVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< std::string >::size_type"""
        return _TimeTagger.StringVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _TimeTagger.StringVector_swigregister
StringVector_swigregister(StringVector)

class TagVector:
    """Proxy of C++ std::vector<(Tag)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.TagVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.TagVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.TagVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< Tag >::size_type"""
        return _TimeTagger.TagVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> TagVector"""
        return _TimeTagger.TagVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.TagVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.TagVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.TagVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> TagVector
        __getitem__(self, i) -> Tag
        """
        return _TimeTagger.TagVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.TagVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> Tag"""
        return _TimeTagger.TagVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.TagVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.TagVector_empty(self)


    def size(self):
        """size(self) -> std::vector< Tag >::size_type"""
        return _TimeTagger.TagVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.TagVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< Tag >::iterator"""
        return _TimeTagger.TagVector_begin(self)


    def end(self):
        """end(self) -> std::vector< Tag >::iterator"""
        return _TimeTagger.TagVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< Tag >::reverse_iterator"""
        return _TimeTagger.TagVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< Tag >::reverse_iterator"""
        return _TimeTagger.TagVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.TagVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< Tag >::allocator_type"""
        return _TimeTagger.TagVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.TagVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< Tag >::iterator
        erase(self, first, last) -> std::vector< Tag >::iterator
        """
        return _TimeTagger.TagVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> TagVector
        __init__(self, arg2) -> TagVector
        __init__(self, size) -> TagVector
        __init__(self, size, value) -> TagVector
        """
        this = _TimeTagger.new_TagVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.TagVector_push_back(self, x)


    def front(self):
        """front(self) -> Tag"""
        return _TimeTagger.TagVector_front(self)


    def back(self):
        """back(self) -> Tag"""
        return _TimeTagger.TagVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.TagVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.TagVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< Tag >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.TagVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.TagVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< Tag >::size_type"""
        return _TimeTagger.TagVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_TagVector
    __del__ = lambda self: None
TagVector_swigregister = _TimeTagger.TagVector_swigregister
TagVector_swigregister(TagVector)

class StringList:
    """Proxy of C++ std::list<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.StringList_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.StringList___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.StringList___bool__(self)


    def __len__(self):
        """__len__(self) -> std::list< std::string >::size_type"""
        return _TimeTagger.StringList___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> StringList"""
        return _TimeTagger.StringList___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.StringList___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.StringList___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.StringList___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> StringList
        __getitem__(self, i) -> std::list< std::string >::value_type const &
        """
        return _TimeTagger.StringList___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.StringList___setitem__(self, *args)


    def pop(self):
        """pop(self) -> std::list< std::string >::value_type"""
        return _TimeTagger.StringList_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.StringList_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.StringList_empty(self)


    def size(self):
        """size(self) -> std::list< std::string >::size_type"""
        return _TimeTagger.StringList_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.StringList_swap(self, v)


    def begin(self):
        """begin(self) -> std::list< std::string >::iterator"""
        return _TimeTagger.StringList_begin(self)


    def end(self):
        """end(self) -> std::list< std::string >::iterator"""
        return _TimeTagger.StringList_end(self)


    def rbegin(self):
        """rbegin(self) -> std::list< std::string >::reverse_iterator"""
        return _TimeTagger.StringList_rbegin(self)


    def rend(self):
        """rend(self) -> std::list< std::string >::reverse_iterator"""
        return _TimeTagger.StringList_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.StringList_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::list< std::string >::allocator_type"""
        return _TimeTagger.StringList_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.StringList_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::list< std::string >::iterator
        erase(self, first, last) -> std::list< std::string >::iterator
        """
        return _TimeTagger.StringList_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> StringList
        __init__(self, arg2) -> StringList
        __init__(self, size) -> StringList
        __init__(self, size, value) -> StringList
        """
        this = _TimeTagger.new_StringList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.StringList_push_back(self, x)


    def front(self):
        """front(self) -> std::list< std::string >::value_type const &"""
        return _TimeTagger.StringList_front(self)


    def back(self):
        """back(self) -> std::list< std::string >::value_type const &"""
        return _TimeTagger.StringList_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.StringList_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.StringList_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::list< std::string >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.StringList_insert(self, *args)


    def pop_front(self):
        """pop_front(self)"""
        return _TimeTagger.StringList_pop_front(self)


    def push_front(self, x):
        """push_front(self, x)"""
        return _TimeTagger.StringList_push_front(self, x)


    def reverse(self):
        """reverse(self)"""
        return _TimeTagger.StringList_reverse(self)

    __swig_destroy__ = _TimeTagger.delete_StringList
    __del__ = lambda self: None
StringList_swigregister = _TimeTagger.StringList_swigregister
StringList_swigregister(StringList)

class EventVector:
    """Proxy of C++ std::vector<(Event)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.EventVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.EventVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.EventVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< Event >::size_type"""
        return _TimeTagger.EventVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> EventVector"""
        return _TimeTagger.EventVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.EventVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.EventVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.EventVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> EventVector
        __getitem__(self, i) -> Event
        """
        return _TimeTagger.EventVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.EventVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> Event"""
        return _TimeTagger.EventVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.EventVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.EventVector_empty(self)


    def size(self):
        """size(self) -> std::vector< Event >::size_type"""
        return _TimeTagger.EventVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.EventVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< Event >::iterator"""
        return _TimeTagger.EventVector_begin(self)


    def end(self):
        """end(self) -> std::vector< Event >::iterator"""
        return _TimeTagger.EventVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< Event >::reverse_iterator"""
        return _TimeTagger.EventVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< Event >::reverse_iterator"""
        return _TimeTagger.EventVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.EventVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< Event >::allocator_type"""
        return _TimeTagger.EventVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.EventVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< Event >::iterator
        erase(self, first, last) -> std::vector< Event >::iterator
        """
        return _TimeTagger.EventVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> EventVector
        __init__(self, arg2) -> EventVector
        __init__(self, size) -> EventVector
        __init__(self, size, value) -> EventVector
        """
        this = _TimeTagger.new_EventVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.EventVector_push_back(self, x)


    def front(self):
        """front(self) -> Event"""
        return _TimeTagger.EventVector_front(self)


    def back(self):
        """back(self) -> Event"""
        return _TimeTagger.EventVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.EventVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.EventVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< Event >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.EventVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.EventVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< Event >::size_type"""
        return _TimeTagger.EventVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_EventVector
    __del__ = lambda self: None
EventVector_swigregister = _TimeTagger.EventVector_swigregister
EventVector_swigregister(EventVector)

class EventVectorVector:
    """Proxy of C++ std::vector<(std::vector<(Event)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.EventVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.EventVectorVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.EventVectorVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< std::vector< Event > >::size_type"""
        return _TimeTagger.EventVectorVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> EventVectorVector"""
        return _TimeTagger.EventVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.EventVectorVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.EventVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.EventVectorVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> EventVectorVector
        __getitem__(self, i) -> EventVector
        """
        return _TimeTagger.EventVectorVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.EventVectorVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> EventVector"""
        return _TimeTagger.EventVectorVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.EventVectorVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.EventVectorVector_empty(self)


    def size(self):
        """size(self) -> std::vector< std::vector< Event > >::size_type"""
        return _TimeTagger.EventVectorVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.EventVectorVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< std::vector< Event > >::iterator"""
        return _TimeTagger.EventVectorVector_begin(self)


    def end(self):
        """end(self) -> std::vector< std::vector< Event > >::iterator"""
        return _TimeTagger.EventVectorVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< std::vector< Event > >::reverse_iterator"""
        return _TimeTagger.EventVectorVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< std::vector< Event > >::reverse_iterator"""
        return _TimeTagger.EventVectorVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.EventVectorVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< std::vector< Event > >::allocator_type"""
        return _TimeTagger.EventVectorVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.EventVectorVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::vector< Event > >::iterator
        erase(self, first, last) -> std::vector< std::vector< Event > >::iterator
        """
        return _TimeTagger.EventVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> EventVectorVector
        __init__(self, arg2) -> EventVectorVector
        __init__(self, size) -> EventVectorVector
        __init__(self, size, value) -> EventVectorVector
        """
        this = _TimeTagger.new_EventVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.EventVectorVector_push_back(self, x)


    def front(self):
        """front(self) -> EventVector"""
        return _TimeTagger.EventVectorVector_front(self)


    def back(self):
        """back(self) -> EventVector"""
        return _TimeTagger.EventVectorVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.EventVectorVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.EventVectorVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::vector< Event > >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.EventVectorVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.EventVectorVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< std::vector< Event > >::size_type"""
        return _TimeTagger.EventVectorVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_EventVectorVector
    __del__ = lambda self: None
EventVectorVector_swigregister = _TimeTagger.EventVectorVector_swigregister
EventVectorVector_swigregister(EventVectorVector)

class UIntVectorVector:
    """Proxy of C++ std::vector<(std::vector<(unsigned int)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _TimeTagger.UIntVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _TimeTagger.UIntVectorVector___nonzero__(self)


    def __bool__(self):
        """__bool__(self) -> bool"""
        return _TimeTagger.UIntVectorVector___bool__(self)


    def __len__(self):
        """__len__(self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _TimeTagger.UIntVectorVector___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(self, i, j) -> UIntVectorVector"""
        return _TimeTagger.UIntVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _TimeTagger.UIntVectorVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(self, i, j)"""
        return _TimeTagger.UIntVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _TimeTagger.UIntVectorVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(self, slice) -> UIntVectorVector
        __getitem__(self, i) -> UIntVector
        """
        return _TimeTagger.UIntVectorVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _TimeTagger.UIntVectorVector___setitem__(self, *args)


    def pop(self):
        """pop(self) -> UIntVector"""
        return _TimeTagger.UIntVectorVector_pop(self)


    def append(self, x):
        """append(self, x)"""
        return _TimeTagger.UIntVectorVector_append(self, x)


    def empty(self):
        """empty(self) -> bool"""
        return _TimeTagger.UIntVectorVector_empty(self)


    def size(self):
        """size(self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _TimeTagger.UIntVectorVector_size(self)


    def swap(self, v):
        """swap(self, v)"""
        return _TimeTagger.UIntVectorVector_swap(self, v)


    def begin(self):
        """begin(self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _TimeTagger.UIntVectorVector_begin(self)


    def end(self):
        """end(self) -> std::vector< std::vector< unsigned int > >::iterator"""
        return _TimeTagger.UIntVectorVector_end(self)


    def rbegin(self):
        """rbegin(self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _TimeTagger.UIntVectorVector_rbegin(self)


    def rend(self):
        """rend(self) -> std::vector< std::vector< unsigned int > >::reverse_iterator"""
        return _TimeTagger.UIntVectorVector_rend(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.UIntVectorVector_clear(self)


    def get_allocator(self):
        """get_allocator(self) -> std::vector< std::vector< unsigned int > >::allocator_type"""
        return _TimeTagger.UIntVectorVector_get_allocator(self)


    def pop_back(self):
        """pop_back(self)"""
        return _TimeTagger.UIntVectorVector_pop_back(self)


    def erase(self, *args):
        """
        erase(self, pos) -> std::vector< std::vector< unsigned int > >::iterator
        erase(self, first, last) -> std::vector< std::vector< unsigned int > >::iterator
        """
        return _TimeTagger.UIntVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(self) -> UIntVectorVector
        __init__(self, arg2) -> UIntVectorVector
        __init__(self, size) -> UIntVectorVector
        __init__(self, size, value) -> UIntVectorVector
        """
        this = _TimeTagger.new_UIntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """push_back(self, x)"""
        return _TimeTagger.UIntVectorVector_push_back(self, x)


    def front(self):
        """front(self) -> UIntVector"""
        return _TimeTagger.UIntVectorVector_front(self)


    def back(self):
        """back(self) -> UIntVector"""
        return _TimeTagger.UIntVectorVector_back(self)


    def assign(self, n, x):
        """assign(self, n, x)"""
        return _TimeTagger.UIntVectorVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _TimeTagger.UIntVectorVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(self, pos, x) -> std::vector< std::vector< unsigned int > >::iterator
        insert(self, pos, n, x)
        """
        return _TimeTagger.UIntVectorVector_insert(self, *args)


    def reserve(self, n):
        """reserve(self, n)"""
        return _TimeTagger.UIntVectorVector_reserve(self, n)


    def capacity(self):
        """capacity(self) -> std::vector< std::vector< unsigned int > >::size_type"""
        return _TimeTagger.UIntVectorVector_capacity(self)

    __swig_destroy__ = _TimeTagger.delete_UIntVectorVector
    __del__ = lambda self: None
UIntVectorVector_swigregister = _TimeTagger.UIntVectorVector_swigregister
UIntVectorVector_swigregister(UIntVectorVector)

TIMETAGGER_VERSION_MAJOR = _TimeTagger.TIMETAGGER_VERSION_MAJOR
TIMETAGGER_VERSION_MIDDLE = _TimeTagger.TIMETAGGER_VERSION_MIDDLE
TIMETAGGER_VERSION_MINOR = _TimeTagger.TIMETAGGER_VERSION_MINOR

def getVersion():
    """getVersion() -> IntVector"""
    return _TimeTagger.getVersion()
CHANNEL_UNUSED = _TimeTagger.CHANNEL_UNUSED
CHANNEL_INVALID = _TimeTagger.CHANNEL_INVALID

def createTimeTagger(*args):
    """
    createTimeTagger(serial) -> TimeTagger
    createTimeTagger() -> TimeTagger
    """
    return _TimeTagger.createTimeTagger(*args)

def setCustomBitFileName(bitFileName):
    """setCustomBitFileName(bitFileName)"""
    return _TimeTagger.setCustomBitFileName(bitFileName)

def freeTimeTagger(tagger):
    """freeTimeTagger(tagger) -> bool"""
    return _TimeTagger.freeTimeTagger(tagger)

def hasInitializedTimeTaggers():
    """hasInitializedTimeTaggers() -> bool"""
    return _TimeTagger.hasInitializedTimeTaggers()

def scanTimeTagger():
    """scanTimeTagger() -> StringVector"""
    return _TimeTagger.scanTimeTagger()
ERROR_LOG = _TimeTagger.ERROR_LOG
WARNING_LOG = _TimeTagger.WARNING_LOG
INFO_LOG = _TimeTagger.INFO_LOG

def setLogger(callback):
    """setLogger(callback) -> logger_callback"""
    return _TimeTagger.setLogger(callback)

def _Log(level, file, line, fmt):
    """_Log(level, file, line, fmt)"""
    return _TimeTagger._Log(level, file, line, fmt)
class TimeTagger:
    """Proxy of C++ TimeTagger class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTagger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def reset(self):
        """reset(self)"""
        return _TimeTagger.TimeTagger_reset(self)


    def setTriggerLevel(self, channel, voltage):
        """setTriggerLevel(self, channel, voltage)"""
        return _TimeTagger.TimeTagger_setTriggerLevel(self, channel, voltage)


    def getTriggerLevel(self, channel):
        """getTriggerLevel(self, channel) -> double"""
        return _TimeTagger.TimeTagger_getTriggerLevel(self, channel)


    def setInputDelay(self, channel, delay):
        """setInputDelay(self, channel, delay)"""
        return _TimeTagger.TimeTagger_setInputDelay(self, channel, delay)


    def getInputDelay(self, channel):
        """getInputDelay(self, channel) -> long long"""
        return _TimeTagger.TimeTagger_getInputDelay(self, channel)


    def setConditionalFilter(self, trigger, filter):
        """setConditionalFilter(self, trigger, filter)"""
        return _TimeTagger.TimeTagger_setConditionalFilter(self, trigger, filter)


    def getConditionalFilterTrigger(self):
        """getConditionalFilterTrigger(self) -> UIntVector"""
        return _TimeTagger.TimeTagger_getConditionalFilterTrigger(self)


    def getConditionalFilterEnable(self):
        """getConditionalFilterEnable(self) -> UIntVector"""
        return _TimeTagger.TimeTagger_getConditionalFilterEnable(self)


    def setFilter(self, state):
        """setFilter(self, state)"""
        return _TimeTagger.TimeTagger_setFilter(self, state)


    def getFilter(self):
        """getFilter(self) -> bool"""
        return _TimeTagger.TimeTagger_getFilter(self)


    def setNormalization(self, state):
        """setNormalization(self, state)"""
        return _TimeTagger.TimeTagger_setNormalization(self, state)


    def getNormalization(self):
        """getNormalization(self) -> bool"""
        return _TimeTagger.TimeTagger_getNormalization(self)


    def setDeadtime(self, channel, deadtime):
        """setDeadtime(self, channel, deadtime) -> long long"""
        return _TimeTagger.TimeTagger_setDeadtime(self, channel, deadtime)


    def getDeadtime(self, channel):
        """getDeadtime(self, channel) -> long long"""
        return _TimeTagger.TimeTagger_getDeadtime(self, channel)


    def registerChannel(self, channel):
        """registerChannel(self, channel)"""
        return _TimeTagger.TimeTagger_registerChannel(self, channel)


    def unregisterChannel(self, channel):
        """unregisterChannel(self, channel)"""
        return _TimeTagger.TimeTagger_unregisterChannel(self, channel)


    def setTestSignal(self, *args):
        """
        setTestSignal(self, channel, enabled)
        setTestSignal(self, channel, enabled)
        """
        return _TimeTagger.TimeTagger_setTestSignal(self, *args)


    def getTestSignal(self, channel):
        """getTestSignal(self, channel) -> bool"""
        return _TimeTagger.TimeTagger_getTestSignal(self, channel)


    def autoCalibration(self, verbose=True):
        """
        autoCalibration(self, verbose=True)
        autoCalibration(self)
        """
        return _TimeTagger.TimeTagger_autoCalibration(self, verbose)


    def getBoardModel(self):
        """getBoardModel(self) -> int"""
        return _TimeTagger.TimeTagger_getBoardModel(self)


    def getSerial(self):
        """getSerial(self) -> std::string"""
        return _TimeTagger.TimeTagger_getSerial(self)


    def getDistributionCount(self, *args):
        """
        getDistributionCount(self)
        getDistributionCount(self, array_out)
        """
        return _TimeTagger.TimeTagger_getDistributionCount(self, *args)


    def getDistributionPSecs(self, *args):
        """
        getDistributionPSecs(self)
        getDistributionPSecs(self, array_out)
        """
        return _TimeTagger.TimeTagger_getDistributionPSecs(self, *args)


    def getChannels(self):
        """getChannels(self) -> unsigned int"""
        return _TimeTagger.TimeTagger_getChannels(self)


    def getPsPerClock(self):
        """getPsPerClock(self) -> long long"""
        return _TimeTagger.TimeTagger_getPsPerClock(self)


    def getOverflows(self):
        """getOverflows(self) -> long long"""
        return _TimeTagger.TimeTagger_getOverflows(self)


    def clearOverflows(self):
        """clearOverflows(self)"""
        return _TimeTagger.TimeTagger_clearOverflows(self)


    def getOverflowsAndClear(self):
        """getOverflowsAndClear(self) -> long long"""
        return _TimeTagger.TimeTagger_getOverflowsAndClear(self)


    def sync(self):
        """sync(self)"""
        return _TimeTagger.TimeTagger_sync(self)

TimeTagger_swigregister = _TimeTagger.TimeTagger_swigregister
TimeTagger_swigregister(TimeTagger)

class Tag:
    """Proxy of C++ Tag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["overflow"] = _TimeTagger.Tag_overflow_set
    __swig_getmethods__["overflow"] = _TimeTagger.Tag_overflow_get
    __swig_setmethods__["channel"] = _TimeTagger.Tag_channel_set
    __swig_getmethods__["channel"] = _TimeTagger.Tag_channel_get
    __swig_setmethods__["time"] = _TimeTagger.Tag_time_set
    __swig_getmethods__["time"] = _TimeTagger.Tag_time_get

    def __init__(self):
        """__init__(self) -> Tag"""
        this = _TimeTagger.new_Tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Tag
    __del__ = lambda self: None
Tag_swigregister = _TimeTagger.Tag_swigregister
Tag_swigregister(Tag)

class _Iterator:
    """Proxy of C++ _Iterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Iterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TimeTagger.delete__Iterator
    __del__ = lambda self: None

    def start(self):
        """start(self)"""
        return _TimeTagger._Iterator_start(self)


    def stop(self):
        """stop(self)"""
        return _TimeTagger._Iterator_stop(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger._Iterator_clear(self)


    def isRunning(self):
        """isRunning(self) -> bool"""
        return _TimeTagger._Iterator_isRunning(self)

_Iterator_swigregister = _TimeTagger._Iterator_swigregister
_Iterator_swigregister(_Iterator)

class Combiner(_Iterator):
    """Proxy of C++ Combiner class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Combiner, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Combiner, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channels):
        """__init__(self, tagger, channels) -> Combiner"""
        this = _TimeTagger.new_Combiner(tagger, channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Combiner
    __del__ = lambda self: None

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Combiner_clear(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Combiner_getData(self, *args)


    def getChannel(self):
        """getChannel(self) -> unsigned int"""
        return _TimeTagger.Combiner_getChannel(self)

Combiner_swigregister = _TimeTagger.Combiner_swigregister
Combiner_swigregister(Combiner)

class CountBetweenMarkers(_Iterator):
    """Proxy of C++ CountBetweenMarkers class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountBetweenMarkers, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CountBetweenMarkers, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, click_channel, begin_channel, end_channel=0xFFFFFFFF, n_values=1000):
        """
        __init__(self, tagger, click_channel, begin_channel, end_channel=0xFFFFFFFF, n_values=1000) -> CountBetweenMarkers
        __init__(self, tagger, click_channel, begin_channel, end_channel=0xFFFFFFFF) -> CountBetweenMarkers
        __init__(self, tagger, click_channel, begin_channel) -> CountBetweenMarkers
        """
        this = _TimeTagger.new_CountBetweenMarkers(tagger, click_channel, begin_channel, end_channel, n_values)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_CountBetweenMarkers
    __del__ = lambda self: None

    def clear(self):
        """clear(self)"""
        return _TimeTagger.CountBetweenMarkers_clear(self)


    def ready(self):
        """ready(self) -> bool"""
        return _TimeTagger.CountBetweenMarkers_ready(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.CountBetweenMarkers_getData(self, *args)


    def getBinWidths(self, *args):
        """
        getBinWidths(self)
        getBinWidths(self, array_out)
        """
        return _TimeTagger.CountBetweenMarkers_getBinWidths(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.CountBetweenMarkers_getIndex(self, *args)


    def getDataBlocking(self, *args):
        """
        getDataBlocking(self)
        getDataBlocking(self, array_out)
        """
        return _TimeTagger.CountBetweenMarkers_getDataBlocking(self, *args)

CountBetweenMarkers_swigregister = _TimeTagger.CountBetweenMarkers_swigregister
CountBetweenMarkers_swigregister(CountBetweenMarkers)

class Counter(_Iterator):
    """Proxy of C++ Counter class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Counter, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Counter, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channels, binwidth=1000000000, n_values=1):
        """
        __init__(self, tagger, channels, binwidth=1000000000, n_values=1) -> Counter
        __init__(self, tagger, channels, binwidth=1000000000) -> Counter
        __init__(self, tagger, channels) -> Counter
        """
        this = _TimeTagger.new_Counter(tagger, channels, binwidth, n_values)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Counter
    __del__ = lambda self: None

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Counter_clear(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Counter_getData(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.Counter_getIndex(self, *args)

Counter_swigregister = _TimeTagger.Counter_swigregister
Counter_swigregister(Counter)

class Coincidences(_Iterator):
    """Proxy of C++ Coincidences class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coincidences, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coincidences, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, coincidenceGroups, coincidenceWindow):
        """__init__(self, tagger, coincidenceGroups, coincidenceWindow) -> Coincidences"""
        this = _TimeTagger.new_Coincidences(tagger, coincidenceGroups, coincidenceWindow)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Coincidences
    __del__ = lambda self: None

    def getChannels(self):
        """getChannels(self) -> UIntVector"""
        return _TimeTagger.Coincidences_getChannels(self)

Coincidences_swigregister = _TimeTagger.Coincidences_swigregister
Coincidences_swigregister(Coincidences)

class Coincidence(Coincidences):
    """Proxy of C++ Coincidence class."""

    __swig_setmethods__ = {}
    for _s in [Coincidences]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coincidence, name, value)
    __swig_getmethods__ = {}
    for _s in [Coincidences]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Coincidence, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channels, window=1000):
        """
        __init__(self, tagger, channels, window=1000) -> Coincidence
        __init__(self, tagger, channels) -> Coincidence
        """
        this = _TimeTagger.new_Coincidence(tagger, channels, window)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getChannel(self):
        """getChannel(self) -> unsigned int"""
        return _TimeTagger.Coincidence_getChannel(self)

    __swig_destroy__ = _TimeTagger.delete_Coincidence
    __del__ = lambda self: None
Coincidence_swigregister = _TimeTagger.Coincidence_swigregister
Coincidence_swigregister(Coincidence)

class Countrate(_Iterator):
    """Proxy of C++ Countrate class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Countrate, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Countrate, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channels):
        """__init__(self, tagger, channels) -> Countrate"""
        this = _TimeTagger.new_Countrate(tagger, channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Countrate
    __del__ = lambda self: None

    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Countrate_getData(self, *args)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Countrate_clear(self)

Countrate_swigregister = _TimeTagger.Countrate_swigregister
Countrate_swigregister(Countrate)

class Iterator(_Iterator):
    """Proxy of C++ Iterator class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Iterator, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channel):
        """__init__(self, tagger, channel) -> Iterator"""
        this = _TimeTagger.new_Iterator(tagger, channel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Iterator
    __del__ = lambda self: None

    def next(self):
        """next(self) -> long long"""
        return _TimeTagger.Iterator_next(self)


    def size(self):
        """size(self) -> int"""
        return _TimeTagger.Iterator_size(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Iterator_clear(self)

Iterator_swigregister = _TimeTagger.Iterator_swigregister
Iterator_swigregister(Iterator)

class TimeTagStreamBuffer:
    """Proxy of C++ TimeTagStreamBuffer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTagStreamBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTagStreamBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tagOverflows"] = _TimeTagger.TimeTagStreamBuffer_tagOverflows_set
    __swig_getmethods__["tagOverflows"] = _TimeTagger.TimeTagStreamBuffer_tagOverflows_get
    __swig_setmethods__["tagChannels"] = _TimeTagger.TimeTagStreamBuffer_tagChannels_set
    __swig_getmethods__["tagChannels"] = _TimeTagger.TimeTagStreamBuffer_tagChannels_get
    __swig_setmethods__["tagTimestamps"] = _TimeTagger.TimeTagStreamBuffer_tagTimestamps_set
    __swig_getmethods__["tagTimestamps"] = _TimeTagger.TimeTagStreamBuffer_tagTimestamps_get
    __swig_setmethods__["size"] = _TimeTagger.TimeTagStreamBuffer_size_set
    __swig_getmethods__["size"] = _TimeTagger.TimeTagStreamBuffer_size_get
    __swig_setmethods__["hasOverflows"] = _TimeTagger.TimeTagStreamBuffer_hasOverflows_set
    __swig_getmethods__["hasOverflows"] = _TimeTagger.TimeTagStreamBuffer_hasOverflows_get
    __swig_setmethods__["tStart"] = _TimeTagger.TimeTagStreamBuffer_tStart_set
    __swig_getmethods__["tStart"] = _TimeTagger.TimeTagStreamBuffer_tStart_get
    __swig_setmethods__["tGetData"] = _TimeTagger.TimeTagStreamBuffer_tGetData_set
    __swig_getmethods__["tGetData"] = _TimeTagger.TimeTagStreamBuffer_tGetData_get

    def getOverflows(self, *args):
        """
        getOverflows(self)
        getOverflows(self, array_out)
        """
        return _TimeTagger.TimeTagStreamBuffer_getOverflows(self, *args)


    def getChannels(self, *args):
        """
        getChannels(self)
        getChannels(self, array_out)
        """
        return _TimeTagger.TimeTagStreamBuffer_getChannels(self, *args)


    def getTimestamps(self, *args):
        """
        getTimestamps(self)
        getTimestamps(self, array_out)
        """
        return _TimeTagger.TimeTagStreamBuffer_getTimestamps(self, *args)


    def __init__(self):
        """__init__(self) -> TimeTagStreamBuffer"""
        this = _TimeTagger.new_TimeTagStreamBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_TimeTagStreamBuffer
    __del__ = lambda self: None
TimeTagStreamBuffer_swigregister = _TimeTagger.TimeTagStreamBuffer_swigregister
TimeTagStreamBuffer_swigregister(TimeTagStreamBuffer)

class TimeTagStream(_Iterator):
    """Proxy of C++ TimeTagStream class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTagStream, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTagStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, tagger, n_max_events, channels) -> TimeTagStream
        __init__(self, tagger, n_max_events) -> TimeTagStream
        """
        this = _TimeTagger.new_TimeTagStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_TimeTagStream
    __del__ = lambda self: None

    def clear(self):
        """clear(self)"""
        return _TimeTagger.TimeTagStream_clear(self)


    def getCounts(self):
        """getCounts(self) -> int"""
        return _TimeTagger.TimeTagStream_getCounts(self)


    def getData(self, buffer):
        """getData(self, buffer)"""
        return _TimeTagger.TimeTagStream_getData(self, buffer)

TimeTagStream_swigregister = _TimeTagger.TimeTagStream_swigregister
TimeTagStream_swigregister(TimeTagStream)

class Dump(_Iterator):
    """Proxy of C++ Dump class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dump, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dump, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, tagger, filename, max_tags, channels) -> Dump
        __init__(self, tagger, filename, max_tags) -> Dump
        """
        this = _TimeTagger.new_Dump(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Dump
    __del__ = lambda self: None

    def clear(self):
        """clear(self)"""
        return _TimeTagger.Dump_clear(self)

Dump_swigregister = _TimeTagger.Dump_swigregister
Dump_swigregister(Dump)

class StartStop(_Iterator):
    """Proxy of C++ StartStop class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartStop, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartStop, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, binwidth=1000):
        """
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, binwidth=1000) -> StartStop
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF) -> StartStop
        __init__(self, tagger, click_channel) -> StartStop
        """
        this = _TimeTagger.new_StartStop(tagger, click_channel, start_channel, binwidth)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_StartStop
    __del__ = lambda self: None

    def start(self):
        """start(self)"""
        return _TimeTagger.StartStop_start(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.StartStop_getData(self, *args)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.StartStop_clear(self)

StartStop_swigregister = _TimeTagger.StartStop_swigregister
StartStop_swigregister(StartStop)

class TimeDifferences(_Iterator):
    """Proxy of C++ TimeDifferences class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeDifferences, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeDifferences, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF, sync_channel=0xFFFFFFFF, binwidth=1000, n_bins=1000, n_histograms=1):
        """
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF, sync_channel=0xFFFFFFFF, binwidth=1000, n_bins=1000, n_histograms=1) -> TimeDifferences
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF, sync_channel=0xFFFFFFFF, binwidth=1000, n_bins=1000) -> TimeDifferences
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF, sync_channel=0xFFFFFFFF, binwidth=1000) -> TimeDifferences
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF, sync_channel=0xFFFFFFFF) -> TimeDifferences
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, next_channel=0xFFFFFFFF) -> TimeDifferences
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF) -> TimeDifferences
        __init__(self, tagger, click_channel) -> TimeDifferences
        """
        this = _TimeTagger.new_TimeDifferences(tagger, click_channel, start_channel, next_channel, sync_channel, binwidth, n_bins, n_histograms)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_TimeDifferences
    __del__ = lambda self: None

    def start(self):
        """start(self)"""
        return _TimeTagger.TimeDifferences_start(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.TimeDifferences_getData(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.TimeDifferences_getIndex(self, *args)


    def setMaxCounts(self, max_counts):
        """setMaxCounts(self, max_counts)"""
        return _TimeTagger.TimeDifferences_setMaxCounts(self, max_counts)


    def getCounts(self):
        """getCounts(self) -> int"""
        return _TimeTagger.TimeDifferences_getCounts(self)


    def ready(self):
        """ready(self) -> bool"""
        return _TimeTagger.TimeDifferences_ready(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.TimeDifferences_clear(self)

TimeDifferences_swigregister = _TimeTagger.TimeDifferences_swigregister
TimeDifferences_swigregister(TimeDifferences)

class Histogram:
    """Proxy of C++ Histogram class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, binwidth=1000, n_bins=1000):
        """
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, binwidth=1000, n_bins=1000) -> Histogram
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF, binwidth=1000) -> Histogram
        __init__(self, tagger, click_channel, start_channel=0xFFFFFFFF) -> Histogram
        __init__(self, tagger, click_channel) -> Histogram
        """
        this = _TimeTagger.new_Histogram(tagger, click_channel, start_channel, binwidth, n_bins)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def start(self):
        """start(self)"""
        return _TimeTagger.Histogram_start(self)


    def stop(self):
        """stop(self)"""
        return _TimeTagger.Histogram_stop(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Histogram_clear(self)


    def isRunning(self):
        """isRunning(self) -> bool"""
        return _TimeTagger.Histogram_isRunning(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Histogram_getData(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.Histogram_getIndex(self, *args)

    __swig_destroy__ = _TimeTagger.delete_Histogram
    __del__ = lambda self: None
Histogram_swigregister = _TimeTagger.Histogram_swigregister
Histogram_swigregister(Histogram)

class Flim:
    """Proxy of C++ Flim class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flim, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flim, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, click_channel, start_channel, next_channel, binwidth=1000, n_bins=1000, n_pixels=1):
        """
        __init__(self, tagger, click_channel, start_channel, next_channel, binwidth=1000, n_bins=1000, n_pixels=1) -> Flim
        __init__(self, tagger, click_channel, start_channel, next_channel, binwidth=1000, n_bins=1000) -> Flim
        __init__(self, tagger, click_channel, start_channel, next_channel, binwidth=1000) -> Flim
        __init__(self, tagger, click_channel, start_channel, next_channel) -> Flim
        """
        this = _TimeTagger.new_Flim(tagger, click_channel, start_channel, next_channel, binwidth, n_bins, n_pixels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def start(self):
        """start(self)"""
        return _TimeTagger.Flim_start(self)


    def stop(self):
        """stop(self)"""
        return _TimeTagger.Flim_stop(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Flim_clear(self)


    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Flim_getData(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.Flim_getIndex(self, *args)

    __swig_destroy__ = _TimeTagger.delete_Flim
    __del__ = lambda self: None
Flim_swigregister = _TimeTagger.Flim_swigregister
Flim_swigregister(Flim)

class Correlation(_Iterator):
    """Proxy of C++ Correlation class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Correlation, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Correlation, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, channel_1, channel_2=0xFFFFFFFF, binwidth=1000, n_bins=1000):
        """
        __init__(self, tagger, channel_1, channel_2=0xFFFFFFFF, binwidth=1000, n_bins=1000) -> Correlation
        __init__(self, tagger, channel_1, channel_2=0xFFFFFFFF, binwidth=1000) -> Correlation
        __init__(self, tagger, channel_1, channel_2=0xFFFFFFFF) -> Correlation
        __init__(self, tagger, channel_1) -> Correlation
        """
        this = _TimeTagger.new_Correlation(tagger, channel_1, channel_2, binwidth, n_bins)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Correlation
    __del__ = lambda self: None

    def getData(self, *args):
        """
        getData(self)
        getData(self, array_out)
        """
        return _TimeTagger.Correlation_getData(self, *args)


    def getIndex(self, *args):
        """
        getIndex(self)
        getIndex(self, array_out)
        """
        return _TimeTagger.Correlation_getIndex(self, *args)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Correlation_clear(self)

Correlation_swigregister = _TimeTagger.Correlation_swigregister
Correlation_swigregister(Correlation)

UNKNOWN = _TimeTagger.UNKNOWN
HIGH = _TimeTagger.HIGH
LOW = _TimeTagger.LOW
class Event:
    """Proxy of C++ Event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _TimeTagger.Event_time_set
    __swig_getmethods__["time"] = _TimeTagger.Event_time_get
    __swig_setmethods__["state"] = _TimeTagger.Event_state_set
    __swig_getmethods__["state"] = _TimeTagger.Event_state_get

    def __init__(self):
        """__init__(self) -> Event"""
        this = _TimeTagger.new_Event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Event
    __del__ = lambda self: None
Event_swigregister = _TimeTagger.Event_swigregister
Event_swigregister(Event)

class Scope(_Iterator):
    """Proxy of C++ Scope class."""

    __swig_setmethods__ = {}
    for _s in [_Iterator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scope, name, value)
    __swig_getmethods__ = {}
    for _s in [_Iterator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scope, name)
    __repr__ = _swig_repr

    def __init__(self, tagger, event_channels, trigger_channel, window_size=1000000000, n_traces=1, n_max_events=1000):
        """
        __init__(self, tagger, event_channels, trigger_channel, window_size=1000000000, n_traces=1, n_max_events=1000) -> Scope
        __init__(self, tagger, event_channels, trigger_channel, window_size=1000000000, n_traces=1) -> Scope
        __init__(self, tagger, event_channels, trigger_channel, window_size=1000000000) -> Scope
        __init__(self, tagger, event_channels, trigger_channel) -> Scope
        """
        this = _TimeTagger.new_Scope(tagger, event_channels, trigger_channel, window_size, n_traces, n_max_events)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TimeTagger.delete_Scope
    __del__ = lambda self: None

    def ready(self):
        """ready(self) -> bool"""
        return _TimeTagger.Scope_ready(self)


    def triggered(self):
        """triggered(self) -> int"""
        return _TimeTagger.Scope_triggered(self)


    def start(self):
        """start(self)"""
        return _TimeTagger.Scope_start(self)


    def clear(self):
        """clear(self)"""
        return _TimeTagger.Scope_clear(self)


    def getData(self):
        """getData(self) -> EventVectorVector"""
        return _TimeTagger.Scope_getData(self)


    def getWindowSize(self):
        """getWindowSize(self) -> long long"""
        return _TimeTagger.Scope_getWindowSize(self)

Scope_swigregister = _TimeTagger.Scope_swigregister
Scope_swigregister(Scope)



